name: Cloud Provider Tests

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ "**" ]

permissions:
  contents: read

# Self-hosted cloud test hosts for cloud provider testing.
# Assuming Ubuntu environment on AWS EC2, GCP Compute Engine, or Azure VM.
#
# Base system setup:
# copy over the Makefile and "make dev-setup"
#
# AWS EC2 setup:
# sudo snap install aws-cli --classic
# Ensure EC2 instance has IAM role attached for AWS credential access
#
# GCP Compute Engine setup:
# Ensure VM has service account attached with appropriate permissions
# GCP credentials are automatically available via metadata service
#
# Azure VM setup:
# curl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash
# az vm identity assign --name $vm_name --resource-group $resource_group
# Ensure VM has managed identity enabled for Azure credential access
#
# Environment Variables for testing:
# S2IAM_TEST_ASSUME_ROLE - Set to a role ARN/identifier to test role assumption (AWS/GCP only)
# S2IAM_TEST_CLOUD_PROVIDER - Set to indicate cloud tests should run (aws/gcp/azure)
# S2IAM_TEST_CLOUD_PROVIDER_NO_ROLE - Set for negative testing (aws/gcp/azure)
# S2IAM_DEBUGGING - Set to true for verbose test output
#
# Both Go and Python testing are fully automated via GitHub Actions
# Go: Runs integration tests with coverage reporting (go coverage format)
# Python: Uses automated validation framework with coverage reporting (XML format)
# Coverage from all environments (no CSP, AWS, Azure, GCP) is uploaded to Codecov

jobs:
  test:
    runs-on: ubuntu-latest
    environment: cloud-VMs
    strategy:
      matrix:
        include:
          - name: aws-positive
            username: ubuntu
            hostname: ec2-18-206-180-126.compute-1.amazonaws.com
            secret: AWS_POSITIVE_KEY
            env_vars: "S2IAM_TEST_ASSUME_ROLE=arn:aws:iam::503396375767:role/NoPermissionsRole"
          - name: aws-negative
            username: ubuntu
            hostname: ec2-35-173-183-101.compute-1.amazonaws.com
            secret: AWS_POSITIVE_KEY
            env_vars: "S2IAM_TEST_CLOUD_PROVIDER_NO_ROLE=aws"
          - name: azure-positive
            username: azureuser
            hostname: 52.186.98.155
            secret: AZURE_POSITIVE_KEY
            env_vars: "S2IAM_TEST_CLOUD_PROVIDER=azure"
          - name: azure-negative
            username: azureuser
            hostname: 74.235.105.73
            secret: AZURE_NEGATIVE_KEY
            env_vars: "S2IAM_TEST_CLOUD_PROVIDER_NO_ROLE=azure"
          - name: gcp-positive
            username: dsharnoff
            hostname: 34.145.164.5
            secret: GCP_POSITIVE_KEY
            env_vars: "S2IAM_TEST_CLOUD_PROVIDER=gcp"
          - name: gcp-negative
            username: dsharnoff
            hostname: 34.21.55.72
            secret: GCP_POSITIVE_KEY
            env_vars: "S2IAM_TEST_CLOUD_PROVIDER_NO_ROLE=gcp"

    env:
      TEST_HOSTNAME: ${{ matrix.hostname }}
      SSH_KEY_SECRET: ${{ matrix.secret }}
      UNIQUE_DIR: test-${{ github.run_id }}-${{ github.run_attempt }}
      EXTRA_ENV: ${{ matrix.env_vars }}
      SSH_OPTS: "-i ~/.ssh/key -o StrictHostKeyChecking=no -o ConnectTimeout=10"
      HOST: ${{ matrix.username }}@${{ matrix.hostname }}

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup SSH key
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets[env.SSH_KEY_SECRET] }}" > ~/.ssh/key
        chmod 600 ~/.ssh/key
        ssh-keyscan -H ${{ matrix.hostname }} >> ~/.ssh/known_hosts
        ssh ${{ env.SSH_OPTS }} ${{ env.HOST }} "echo 'SSH connection successful'"

    - name: Run remote tests via Make (copy, run, download, cleanup)
      env:
        ENV_VARS: ${{ env.EXTRA_ENV }}
        UNIQUE_DIR: ${{ env.UNIQUE_DIR }}
      run: |
        set -euox pipefail
        make ssh-copy-to-remote
        make ssh-run-remote-tests TEST_TARGET=on-remote-test
        make ssh-download-coverage
        ls -la go-coverage.out python-coverage.xml

    - name: Display coverage summaries
      run: |
        echo "=== Go Coverage (first lines) ==="; head -2 go-coverage.out || true
        echo "=== Python Coverage (first lines) ==="; head -10 python-coverage.xml || true

    - name: Upload Go coverage to Codecov
      uses: codecov/codecov-action@v5.4.3
      with:
        files: ./go-coverage.out
        flags: go,${{ matrix.name }}
        fail_ci_if_error: true
        name: ${{ matrix.name }}-go-coverage
      env:
        CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

    - name: Upload Python coverage to Codecov
      uses: codecov/codecov-action@v5.4.3
      with:
        files: ./python-coverage.xml
        flags: python,${{ matrix.name }}
        fail_ci_if_error: true
        name: ${{ matrix.name }}-python-coverage
      env:
        CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

    - name: Clean up remote directory (Make)
      if: always()
      env:
        UNIQUE_DIR: ${{ env.UNIQUE_DIR }}
      run: |
        set -e
        make ssh-cleanup-remote

    - name: Cleanup SSH key
      if: always()
      run: |
        rm -f ~/.ssh/key

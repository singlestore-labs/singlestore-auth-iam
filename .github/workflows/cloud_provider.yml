name: Cloud Provider Tests

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ "**" ]

permissions:
  contents: read

# Self-hosted cloud test hosts for cloud provider testing.
# Assuming Ubuntu environment on AWS EC2, GCP Compute Engine, or Azure VM.
#
# Base system setup:
# copy over the Makefile and "make install"
#
# AWS EC2 setup:
# sudo snap install aws-cli --classic
# Ensure EC2 instance has IAM role attached for AWS credential access
#
# GCP Compute Engine setup:
# Ensure VM has service account attached with appropriate permissions
# GCP credentials are automatically available via metadata service
#
# Azure VM setup:
# curl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash
# az vm identity assign --name $vm_name --resource-group $resource_group
# Ensure VM has managed identity enabled for Azure credential access
#
# Environment Variables for testing:
# S2IAM_TEST_ASSUME_ROLE - Set to a role ARN/identifier to test role assumption (AWS/GCP only)
# S2IAM_TEST_CLOUD_PROVIDER - Set to indicate cloud tests should run (aws/gcp/azure)
# S2IAM_TEST_CLOUD_PROVIDER_NO_ROLE - Set for negative testing (aws/gcp/azure)
# S2IAM_DEBUGGING - Set to true for verbose test output
#
# Both Go and Python testing are fully automated via GitHub Actions
# Go: Runs integration tests with coverage reporting (go coverage format)
# Python: Uses automated validation framework with coverage reporting (XML format)
# Coverage from all environments (no CSP, AWS, Azure, GCP) is uploaded to Codecov

jobs:
  test:
    runs-on: ubuntu-latest
    environment: cloud-VMs

    strategy:
      matrix:
        include:
          - name: aws-positive
            HOST: awstest2
            SECRET: AWS_POSITIVE_KEY
            ENV_VARS: "S2IAM_TEST_ASSUME_ROLE=arn:aws:iam::503396375767:role/NoPermissionsRole"
          - name: aws-negative
            HOST: awstest3
            SECRET: AWS_NEGATIVE_KEY
            ENV_VARS: "S2IAM_TEST_CLOUD_PROVIDER_NO_ROLE=aws"
          - name: gcp-positive
            HOST: gcptest2
            SECRET: GCP_POSITIVE_KEY
            ENV_VARS: "S2IAM_TEST_CLOUD_PROVIDER=gcp"
          - name: gcp-negative
            HOST: gcptest3
            SECRET: GCP_NEGATIVE_KEY
            ENV_VARS: "S2IAM_TEST_CLOUD_PROVIDER_NO_ROLE=gcp"
          - name: azure-positive
            HOST: azuretest2
            SECRET: AZURE_POSITIVE_KEY
            ENV_VARS: "S2IAM_TEST_CLOUD_PROVIDER=azure"
          - name: azure-negative
            HOST: azuretest3
            SECRET: AZURE_NEGATIVE_KEY
            ENV_VARS: "S2IAM_TEST_CLOUD_PROVIDER_NO_ROLE=azure"

    env:
      HOST: ${{ matrix.HOST }}
      ENV_VARS: ${{ matrix.ENV_VARS }}
      UNIQUE_DIR: ci-${{ github.run_id }}-${{ github.run_attempt }}-${{ matrix.name }}

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup SSH key
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets[matrix.SECRET] }}" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        ssh-keyscan -H ${{ matrix.HOST }} >> ~/.ssh/known_hosts

    - name: Test SSH connection
      run: |
        ssh -o StrictHostKeyChecking=no -o ConnectTimeout=10 ${{ matrix.HOST }} \
          "echo 'SSH connection successful to ${{ matrix.HOST }}'"

    - name: Run cloud provider tests using Makefile
      run: |
        # Run both Go and Python tests sequentially on the same machine
        # to avoid overloading the cloud VMs
        make ssh-copy-to-remote
        make ssh-run-remote-tests TEST_TARGET="on-remote-test"
        make ssh-download-coverage

    - name: Upload Go coverage to Codecov
      uses: codecov/codecov-action@v5.4.3
      with:
        fail_ci_if_error: true
        name: ${{ matrix.name }}-go-coverage
        file: ./go-coverage-*.out
        flags: go,${{ matrix.name }}
      env:
        CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

    - name: Upload Python coverage to Codecov
      uses: codecov/codecov-action@v5.4.3
      with:
        fail_ci_if_error: true
        name: ${{ matrix.name }}-python-coverage
        file: ./python-coverage-*.xml
        flags: python,${{ matrix.name }}
      env:
        CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

    - name: Cleanup remote directory
      if: always()
      run: |
        make ssh-cleanup-remote

    - name: Cleanup SSH key
      if: always()
      run: |
        rm -f ~/.ssh/id_rsa

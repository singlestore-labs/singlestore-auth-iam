name: AWS positive test

on: [pull_request]

permissions:  # added using https://github.com/step-security/secure-workflows
  contents: read

env:
  TEST_USERNAME: ubuntu
  TEST_HOSTNAME: ec2-18-206-180-126.compute-1.amazonaws.com
  SSH_KEY_SECRET: AWS_POSITIVE_KEY
  SSH_KEY_NAME: aws-test-key.pem
  UNIQUE_DIR: test-${{ github.run_id }}-${{ github.run_attempt }}-aws

jobs:
  aws-test:
    runs-on: ubuntu-latest
    environment: using-dave
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Setup SSH key
      run: |
        mkdir -p ~/.ssh
        
        # Write the SSH key and handle potential line break issues
        echo "${{ secrets.AWS_POSITIVE_KEY }}" > ~/.ssh/${{ env.SSH_KEY_NAME }}
        sed -i 's/\\n/\n/g' ~/.ssh/${{ env.SSH_KEY_NAME }}
        chmod 600 ~/.ssh/${{ env.SSH_KEY_NAME }}
        
        # Add host to known_hosts
        ssh-keyscan -H ${{ env.TEST_HOSTNAME }} >> ~/.ssh/known_hosts
        
        # Test SSH connection
        ssh -i ~/.ssh/${{ env.SSH_KEY_NAME }} -o StrictHostKeyChecking=no -o ConnectTimeout=10 \
          ${{ env.TEST_USERNAME }}@${{ env.TEST_HOSTNAME }} "echo 'SSH connection successful'"
    
    - name: Copy repository to remote system
      run: |
        rsync -avz --exclude='.git' -e "ssh -i ~/.ssh/${{ env.SSH_KEY_NAME }} -o StrictHostKeyChecking=no" \
          ./ "${{ env.TEST_USERNAME }}@${{ env.TEST_HOSTNAME }}:tests/${{ env.UNIQUE_DIR }}/"
    
    - name: Set remote environment variables and run tests
      run: |
        ssh -i ~/.ssh/${{ env.SSH_KEY_NAME }} -o StrictHostKeyChecking=no ${{ env.TEST_USERNAME }}@${{ env.TEST_HOSTNAME }} << 'EOF' 2>&1 | tee test_output.log
          # Set environment variables here - to be specified later
          # export VAR1=value1
          # export VAR2=value2
          
          cd tests/${{ env.UNIQUE_DIR }}/go
          go test -v --failfast -coverprofile=coverage.out -covermode=atomic ./... 
        EOF
    
    - name: Verify test results
      run: |
        set -x  # Enable debug output
        
        # Check for required test passes
        echo "Checking for TestWithDebugging..."
        grep --silent -- "--- PASS: TestWithDebugging" test_output.log || echo "TestWithDebugging not found"
        
        echo "Checking for PASS..."
        grep --silent -- "^PASS" test_output.log || echo "PASS not found"
        
        echo "Showing all 'ok' lines:"
        grep "^ok" test_output.log
        
        echo "Checking specific ok patterns..."
        grep --silent "^ok  github.com/singlestore-labs/singlestore-auth-iam/go/cmd " test_output.log || echo "cmd pattern not found"
        grep --silent "^ok  github.com/singlestore-labs/singlestore-auth-iam/go/cmd/s2iam " test_output.log || echo "s2iam pattern not found"
        grep --silent "^ok  github.com/singlestore-labs/singlestore-auth-iam/go/cmd/s2iam_test_server " test_output.log || echo "s2iam_test_server pattern not found"
        grep --silent "^ok  github.com/singlestore-labs/singlestore-auth-iam/go/s2iam " test_output.log || echo "s2iam package pattern not found"
        
        echo "All tests passed successfully!"

    - name: Download coverage file
      run: |
        # Download coverage file from remote
        scp -i ~/.ssh/${{ env.SSH_KEY_NAME }} -o StrictHostKeyChecking=no \
          ${{ env.TEST_USERNAME }}@${{ env.TEST_HOSTNAME }}:tests/${{ env.UNIQUE_DIR }}/go/coverage.out ./coverage.out
        
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.out
        name: ${{ github.job }}-coverage
        flags: ${{ github.job }}
        fail_ci_if_error: false
        token: ${{ secrets.CODECOV_TOKEN }}
    
    - name: Clean up remote directory
      if: always()
      run: |
        ssh -i ~/.ssh/${{ env.SSH_KEY_NAME }} -o StrictHostKeyChecking=no ${{ env.TEST_USERNAME }}@${{ env.TEST_HOSTNAME }} "rm -rf tests/${{ env.UNIQUE_DIR }}"

    - name: Cleanup SSH key
      if: always()
      run: |
        rm -f ~/.ssh/${{ env.SSH_KEY_NAME }}

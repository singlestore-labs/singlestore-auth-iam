- name: Verify test results
      run: |
        echo "Checking for TestWithDebugging..."
        grep --silent -- "--- PASS: TestWithDebugging" test_output.log
        echo "Checking for PASS..."
        grep --silent -- "^PASS" test_output.log
        echo "Showing ok lines..."
        grep "^ok" test_output.log
        echo "Checking cmd pattern..."
        grep --name: Multi-Cloud Tests

on: [pull_request]

permissions:
  contents: read

jobs:
  test:
    runs-on: ubuntu-latest
    environment: using-dave
    strategy:
      matrix:
        include:
          - name: aws
            hostname: ec2-18-206-180-126.compute-1.amazonaws.com
            secret: AWS_POSITIVE_KEY
            env_vars: ""
          # Add your other test configurations here
    
    env:
      TEST_USERNAME: ubuntu
      TEST_HOSTNAME: ${{ matrix.hostname }}
      SSH_KEY_SECRET: ${{ matrix.secret }}
      SSH_KEY_NAME: ${{ matrix.name }}-test-key.pem
      UNIQUE_DIR: test-${{ github.run_id }}-${{ github.run_attempt }}-${{ matrix.name }}
      EXTRA_ENV: ${{ matrix.env_vars }}
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Setup SSH key
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets[env.SSH_KEY_SECRET] }}" > ~/.ssh/${{ env.SSH_KEY_NAME }}
        sed -i 's/\\n/\n/g' ~/.ssh/${{ env.SSH_KEY_NAME }}
        chmod 600 ~/.ssh/${{ env.SSH_KEY_NAME }}
        ssh-keyscan -H ${{ env.TEST_HOSTNAME }} >> ~/.ssh/known_hosts
        ssh -i ~/.ssh/${{ env.SSH_KEY_NAME }} -o StrictHostKeyChecking=no -o ConnectTimeout=10 \
          ${{ env.TEST_USERNAME }}@${{ env.TEST_HOSTNAME }} "echo 'SSH connection successful'"
    
    - name: Copy repository to remote system
      run: |
        rsync -avz --exclude='.git' -e "ssh -i ~/.ssh/${{ env.SSH_KEY_NAME }} -o StrictHostKeyChecking=no" \
          ./ "${{ env.TEST_USERNAME }}@${{ env.TEST_HOSTNAME }}:tests/${{ env.UNIQUE_DIR }}/"
    
    - name: Run tests with coverage and verification
      run: |
        ssh -i ~/.ssh/${{ env.SSH_KEY_NAME }} -o StrictHostKeyChecking=no ${{ env.TEST_USERNAME }}@${{ env.TEST_HOSTNAME }} << 'EOF' 
          cd tests/${{ env.UNIQUE_DIR }}/go
          
          # First run: for verification output (no coverage)
          echo "Running tests for verification..."
          env ${{ env.EXTRA_ENV }} go test -v --failfast ./... 
          
          # Second run: generate coverage (output to /dev/null)
          echo "Running tests with coverage..."
          env ${{ env.EXTRA_ENV }} go test -v --failfast -coverprofile=coverage.out -covermode=atomic ./... > /dev/null
        EOF 2>&1 | tee test_output.log
    
    - name: Verify test results
      run: |
        echo "Checking for TestWithDebugging..."
        grep --silent -- "--- PASS: TestWithDebugging" test_output.log
        echo "Checking for PASS..."
        grep --silent -- "^PASS" test_output.log
        echo "Showing ok lines..."
        grep "^ok" test_output.log
        echo "Checking cmd pattern..."
        grep --silent "^ok  github.com/singlestore-labs/singlestore-auth-iam/go/cmd " test_output.log
        echo "Checking s2iam pattern..."
        grep --silent "^ok  github.com/singlestore-labs/singlestore-auth-iam/go/cmd/s2iam " test_output.log
        echo "Checking s2iam_test_server pattern..."
        grep --silent "^ok  github.com/singlestore-labs/singlestore-auth-iam/go/cmd/s2iam_test_server " test_output.log
        echo "Checking s2iam package pattern..."
        grep --silent "^ok  github.com/singlestore-labs/singlestore-auth-iam/go/s2iam " test_output.log
        echo "All tests passed successfully!"
    
    - name: Download coverage file
      run: |
        scp -i ~/.ssh/${{ env.SSH_KEY_NAME }} -o StrictHostKeyChecking=no \
          ${{ env.TEST_USERNAME }}@${{ env.TEST_HOSTNAME }}:tests/${{ env.UNIQUE_DIR }}/go/coverage.out ./coverage.out
        
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.out
        name: ${{ matrix.name }}-coverage
        flags: ${{ matrix.name }}
        fail_ci_if_error: false
        token: ${{ secrets.CODECOV_TOKEN }}
    
    - name: Clean up remote directory
      if: always()
      run: |
        ssh -i ~/.ssh/${{ env.SSH_KEY_NAME }} -o StrictHostKeyChecking=no ${{ env.TEST_USERNAME }}@${{ env.TEST_HOSTNAME }} "rm -rf tests/${{ env.UNIQUE_DIR }}"

    - name: Cleanup SSH key
      if: always()
      run: |
        rm -f ~/.ssh/${{ env.SSH_KEY_NAME }}
